take the functions that are defined inside the other functions and make them top-level functions. 
  Then use codetools::findGlobals() to find which variables they reference and now need to be passed to them.
  Make these changes in the definitions and then calls to those functions.
     A bit of work for no gain in speed.  But this makes the code clearer.
     
Assign common computations that are repeated.
   E.g. see ifelse.R taken from alfalfa.Kcb.cycles().

ifelse

use crop name for rownames on crop.parameters and then use
  crop.parameters[crop, ] rather than [ which(crop.parameters$crop == crop) ]


Break long commands into parts.


In GrapeLastIrr 
 df <- data.frame(cbind(Kcb.adjusted, ETo, P, doys.model))
 Avoid the cbind()


summing the means seems like it could be simplified, but maybe not.
 daily.ETcb <- tapply(df$ETcb, df$doys.model, mean)
 daily.P <- tapply(df$P, df$doys.model, mean)
 last.irr <- Dr.initial[i] + sum(daily.ETcb) - sum(daily.P) - AD

DepEndCalc
  Don't assign result to a local variable.
      Dep.end.est <- max(Dep.end[i - 1] - P[i] + Ep[i] / fewp[i] + DPep[i], 0)